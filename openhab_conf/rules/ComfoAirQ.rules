import org.eclipse.smarthome.model.script.ScriptServiceUtil;
// For OH3 Replace by import org.openhab.core.model.script.ScriptServiceUtil
var boolean reloadOnce = true


rule "gEQ_Ventilation_Mode_End_Date_String update end date"
when
    Member of gEQ_Ventilation_Mode_End_Date_String changed
then
    
    val originalSensor  =  triggeringItem
    val sensorName      =  originalSensor.name.substring(0, originalSensor.name.lastIndexOf('_String'));
    
    val DateTimeItem sensor = ScriptServiceUtil.getItemRegistry?.getItem(sensorName) as DateTimeItem;

    if ( originalSensor.state != UNDEF ) 
    {

        val DateTimeType modeChangeDate = DateTimeType.valueOf(originalSensor.state.toString) //Does not work in OH3
        if(now.isBefore(modeChangeDate.zonedDateTime.toInstant.toEpochMilli)) //Does not work in OH3
        {
            sensor.postUpdate(modeChangeDate)
        } else 
        {
            sensor.postUpdate(UNDEF)
        }
    } else 
    {
        sensor.postUpdate(UNDEF)
    }

    end


rule "Reload ComfoAirQ Homie"
when
    Item vEQ_Ventilation_Gateway_Reload_Timer changed to OFF
then
    logInfo("homie_rules", "Reload Homie Devices")
    val mqttActions = getActions("mqtt","mqtt:broker:local")
    mqttActions.publishMQTT("homie/zehnderq450gateway/controls/reload/set","true", false)
end


rule "Set Reload Homie Devices on System start"
when
    System started
then
    if(reloadOnce)       
    {
        logInfo("homie_rules", "Set reload Homie Devices on system Start")
        vEQ_Ventilation_Gateway_Reload_Timer.sendCommand(ON)
    }
    reloadOnce = false
end


rule "Update Ventilation_Gateway_Connection_State_Last_Update"
when
  Item EQ_Ventilation_Gateway_Connection_State received update
then
  vQ_Ventilation_Gateway_Connection_State_Last_Update.postUpdate( new DateTimeType() )
end

rule "Check and Reload ComfoAirQ Homie"
when
    Time cron "0 0/5 * * * ?"
then
//OH3 Replace with   if ( now.minusMinutes(3).isAfter((vQ_Ventilation_Gateway_Connection_State_Last_Update.state as DateTimeType).getZonedDateTime()))
    if ( now.minusMinutes(3).isAfter((vQ_Ventilation_Gateway_Connection_State_Last_Update.state as DateTimeType).calendar.timeInMillis))
    {
        // vEQ_Ventilation_Gateway_Reload_Timer.sendCommand(ON)
        logInfo("homie_rules", "Reload Homie Devices")
        val mqttActions = getActions("mqtt","mqtt:broker:local")
        mqttActions.publishMQTT("homie/zehnderq450gateway/controls/reload/set","true", false)
    }
end


rule "gEQ_Ventilation_Conditions update state"
when
    Member of gEQ_Ventilation_Conditions changed
then
    
    val originalSensor  =  triggeringItem
    val sensorBaseName  =  originalSensor.name.substring(0, originalSensor.name.lastIndexOf('_'));
    val GenericItem sensorTemperature = ScriptServiceUtil.getItemRegistry?.getItem(sensorBaseName + '_Temperature') as GenericItem;
    val GenericItem sensorHumidity = ScriptServiceUtil.getItemRegistry?.getItem(sensorBaseName + '_Humidity') as GenericItem;
    val GenericItem sensorCondition = ScriptServiceUtil.getItemRegistry?.getItem(sensorBaseName + '_Conditions') as GenericItem;

    var temperature = "-"
    var humidity = "-"

    if (sensorTemperature.state != UNDEF) {
        temperature = sensorTemperature.state.toString
    } 

    if (sensorHumidity.state != UNDEF) {
        humidity = sensorHumidity.state.toString
    } 
    
    sensorCondition.postUpdate( temperature + " / " + humidity + " %")

end

rule "set EQ_Ventilation_State"
when
    Member of gEQ_Ventilation_State changed
then
    
    var temperatureOutdoor = "-"
    var temperatureSupply = "-"
    // var temperatureExtract = "-"

    var currentState = "-"

    var flowSupply = 0
    var flowExhaust = 0

    if (EQ_Ventilation_Outdoor_Temperature.state != UNDEF) {
        temperatureOutdoor = EQ_Ventilation_Outdoor_Temperature.state.toString
    } 

    if (EQ_Ventilation_Supply_Temperature.state != UNDEF) {
        temperatureSupply = EQ_Ventilation_Supply_Temperature.state.toString
    } 

    // if (EQ_Ventilation_Extract_Temperature.state != UNDEF) {
    //     temperatureExtract = EQ_Ventilation_Extract_Temperature.state.toString
    // } 

    if (EQ_Ventilation_Current_Mode.state != UNDEF) {
        currentState = EQ_Ventilation_Current_Mode.state.toString
    } 

    if (EQ_Ventilation_Supply_Flow.state != UNDEF) {
        flowSupply = (EQ_Ventilation_Supply_Flow.state as Number).intValue
    } 

    if (EQ_Ventilation_Exhaust_Flow.state != UNDEF) {
        flowExhaust = (EQ_Ventilation_Exhaust_Flow.state as Number).intValue
    }

    var bypass = ""
    if ( EQ_Ventilation_Bypass_State.state != UNDEF &&  (EQ_Ventilation_Bypass_State.state as Number).intValue > 0 )
    {
        bypass = 'âŒ¥'
    }

    if (currentState == 'auto')
    {
        currentState = 'â’¶'
    } else if (currentState == 'manual')
    {
        currentState = 'â“‚'
    } else if (currentState == 'temporary manual')
    {
        currentState = 'ðŸ•’ â“‚'
    } else if (currentState == 'scheduled away')
    {
        currentState = 'ðŸ•’ ðŸŒ´'
    } else if (currentState == 'boost')
    {
        currentState = 'ðŸ•’ â’·'
    }

    var flow = Math.max(flowSupply,flowExhaust)

    var ventStateInfo = ""

    if (EQ_Ventilation_Gateway_Connection_State.state.toString == 'READY') {
        ventStateInfo = currentState + "  " + bypass + " " + temperatureOutdoor + " â†’ " + temperatureSupply + " âœ‡ " + flow + " mÂ³/h" 
    } else {
        ventStateInfo = EQ_Ventilation_Gateway_Connection_State.state.toString
    } 


    EQ_Ventilation_State.postUpdate( ventStateInfo )

end


rule "set EQ_Ventilation_Fan_Mode_End_Date"
when
    Item EQ_Ventilation_Supply_Fan_Start_Time changed or 
    Item EQ_Ventilation_Exhaust_Fan_Start_Time changed
then
    // Setting  item  EQ_Ventilation_Fan_Mode_End_Date  "Current mode till [%1$tF %1$tR]"  
    var supplyFanStartTime = 0
    var exhaustFanStartTime = 0

    if (EQ_Ventilation_Supply_Fan_Start_Time.state != UNDEF) {
        supplyFanStartTime = (EQ_Ventilation_Supply_Fan_Start_Time.state as Number).intValue
    }

    if (EQ_Ventilation_Exhaust_Fan_Start_Time.state != UNDEF) {
        exhaustFanStartTime = (EQ_Ventilation_Exhaust_Fan_Start_Time.state as Number).intValue
    }

    if (supplyFanStartTime > 0  && exhaustFanStartTime > 0 ) {
        if (supplyFanStartTime <= exhaustFanStartTime){
            EQ_Ventilation_Fan_Mode_End_Date.postUpdate(EQ_Ventilation_Supply_Fan_Start_Date.state)
        } else {
            EQ_Ventilation_Fan_Mode_End_Date.postUpdate(EQ_Ventilation_Exhaust_Fan_Start_Date.state)
        }

    } else if ( supplyFanStartTime <= exhaustFanStartTime) {
           EQ_Ventilation_Fan_Mode_End_Date.postUpdate(EQ_Ventilation_Exhaust_Fan_Start_Date.state)
    } else if ( supplyFanStartTime > exhaustFanStartTime) {
            EQ_Ventilation_Fan_Mode_End_Date.postUpdate(EQ_Ventilation_Supply_Fan_Start_Date.state)
    }

end
